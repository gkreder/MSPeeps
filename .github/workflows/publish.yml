name: Build and Publish Package

on:
  release:
    types: [published]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build wheel

      - name: Build package
        run: python -m build

      - name: Archive distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: dist-artifacts
          path: dist/
          retention-days: 1

  publish-pypi:
    name: Publish to PyPI
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/mspeeps/
    permissions:
      id-token: write  # Required for trusted publishing
    
    steps:
      - name: Download distribution packages
        uses: actions/download-artifact@v4
        with:
          name: dist-artifacts
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        # Trusted publishing - no token needed with OpenID Connect

  publish-conda:
    name: Publish to Anaconda
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v3.1.1
        with:
          miniconda-version: "latest"
          auto-update-conda: true
          channels: conda-forge
          auto-activate-base: true
          activate-environment: ""

      - name: Create build environment
        shell: bash -l {0}
        run: |
          conda create -n build python=3.10 conda-build anaconda-client setuptools pip -y
          conda activate build

      - name: Install dependencies
        shell: bash -l {0}
        run: |
          conda activate build
          pip install tomli

      - name: Generate meta.yaml from pyproject.toml
        shell: bash -l {0}
        run: |
          conda activate build
          python conda-recipe/generate_meta.py
          echo "Generated meta.yaml:"
          cat conda-recipe/meta.yaml

      - name: Build Conda package
        shell: bash -l {0}
        run: |
          conda activate build
          conda build conda-recipe --output-folder conda-dist

      - name: List build output
        shell: bash -l {0}
        run: |
          find conda-dist -type f -name "*.conda" | sort
          # Also check for any tar.bz2 files just in case
          find conda-dist -type f -name "*.tar.bz2" | sort
          # List all files recursively
          find conda-dist -type f | sort

      - name: Upload to Anaconda
        shell: bash -l {0}
        env:
          ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
        run: |
          conda activate build
          
          # Find and upload .conda files (modern format)
          for PKG_PATH in $(find conda-dist -type f -name "*.conda"); do
            echo "Uploading $PKG_PATH"
            anaconda -t $ANACONDA_TOKEN upload $PKG_PATH --user gkreder --label main
          done
          
          # Also try tar.bz2 files for older conda
          for PKG_PATH in $(find conda-dist -type f -name "*.tar.bz2"); do
            echo "Uploading $PKG_PATH"
            anaconda -t $ANACONDA_TOKEN upload $PKG_PATH --user gkreder --label main
          done 